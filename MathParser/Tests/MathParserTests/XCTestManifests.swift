#if !canImport(ObjectiveC)
import XCTest

extension EvaluatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EvaluatorTests = [
        ("testAggregateFunctions", testAggregateFunctions),
        ("testAliases", testAliases),
        ("testBadAliases", testBadAliases),
        ("testBadCustomFunction", testBadCustomFunction),
        ("testBasicFunctions", testBasicFunctions),
        ("testBitwiseFunctions", testBitwiseFunctions),
        ("testConcatInsteadOfImplicitMultiply", testConcatInsteadOfImplicitMultiply),
        ("testConstantFunctions", testConstantFunctions),
        ("testCustomFunction", testCustomFunction),
        ("testESquared", testESquared),
        ("testFunction", testFunction),
        ("testFunctionOverride", testFunctionOverride),
        ("testFunctionResolution", testFunctionResolution),
        ("testGeometricFunctions", testGeometricFunctions),
        ("testHyperbolicTrigonometricFunctions", testHyperbolicTrigonometricFunctions),
        ("testLogic", testLogic),
        ("testLogicalFunctions", testLogicalFunctions),
        ("testNumber", testNumber),
        ("testTrigonometricFunctions", testTrigonometricFunctions),
        ("testUnknownFunction", testUnknownFunction),
        ("testUnknownVariable", testUnknownVariable),
        ("testVariable", testVariable),
        ("testVariableResolution", testVariableResolution),
        ("testVariableWithNestedExpression", testVariableWithNestedExpression),
    ]
}

extension ExpressionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpressionTests = [
        ("testBinaryOperator", testBinaryOperator),
        ("testBinaryOperatorCollapsingLeftOperands", testBinaryOperatorCollapsingLeftOperands),
        ("testBinaryOperatorCollapsingRightOperands", testBinaryOperatorCollapsingRightOperands),
        ("testBinaryOperatorMissingLeftOperand", testBinaryOperatorMissingLeftOperand),
        ("testBinaryOperatorMissingRightOperand", testBinaryOperatorMissingRightOperand),
        ("testFunctionWithArguments", testFunctionWithArguments),
        ("testGroup", testGroup),
        ("testInvalidFormat", testInvalidFormat),
        ("testLeftUnaryOperator", testLeftUnaryOperator),
        ("testMissingLeftOperand", testMissingLeftOperand),
        ("testMissingOperator", testMissingOperator),
        ("testMissingRightOperand", testMissingRightOperand),
        ("testNumber", testNumber),
        ("testRecursiveLeftUnaryOperator", testRecursiveLeftUnaryOperator),
        ("testRecursiveRightUnaryOperator", testRecursiveRightUnaryOperator),
        ("testRightUnaryOperator", testRightUnaryOperator),
        ("testSimpleFunction", testSimpleFunction),
        ("testSimplifyWithNestedExpressions", testSimplifyWithNestedExpressions),
        ("testUnaryPlus", testUnaryPlus),
        ("testVariable", testVariable),
    ]
}

extension GithubIssues {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GithubIssues = [
        ("testIssue10", testIssue10),
        ("testIssue104", testIssue104),
        ("testIssue105", testIssue105),
        ("testIssue108", testIssue108),
        ("testIssue109", testIssue109),
        ("testIssue11", testIssue11),
        ("testIssue110", testIssue110),
        ("testIssue113", testIssue113),
        ("testIssue12", testIssue12),
        ("testIssue134", testIssue134),
        ("testIssue138", testIssue138),
        ("testIssue14", testIssue14),
        ("testIssue142", testIssue142),
        ("testIssue144", testIssue144),
        ("testIssue145", testIssue145),
        ("testIssue15", testIssue15),
        ("testIssue16", testIssue16),
        ("testIssue19", testIssue19),
        ("testIssue2", testIssue2),
        ("testIssue23", testIssue23),
        ("testIssue27", testIssue27),
        ("testIssue29", testIssue29),
        ("testIssue30", testIssue30),
        ("testIssue31", testIssue31),
        ("testIssue38", testIssue38),
        ("testIssue39", testIssue39),
        ("testIssue4", testIssue4),
        ("testIssue40", testIssue40),
        ("testIssue42", testIssue42),
        ("testIssue43", testIssue43),
        ("testIssue49", testIssue49),
        ("testIssue56", testIssue56),
        ("testIssue57", testIssue57),
        ("testIssue63", testIssue63),
        ("testIssue64", testIssue64),
        ("testIssue7", testIssue7),
        ("testIssue75", testIssue75),
        ("testIssue79", testIssue79),
        ("testIssue9", testIssue9),
        ("testIssue92", testIssue92),
        ("testIssue95", testIssue95),
        ("testIssue97", testIssue97),
    ]
}

extension GroupingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GroupingTests = [
        ("testEmptyFunctionArgument", testEmptyFunctionArgument),
        ("testEmptyGroup", testEmptyGroup),
        ("testEmptyRootGroup", testEmptyRootGroup),
        ("testFunctionMissingCloseParenthesis", testFunctionMissingCloseParenthesis),
        ("testFunctionMissingOpenParenthesis", testFunctionMissingOpenParenthesis),
        ("testFunctionParameterGrouping", testFunctionParameterGrouping),
        ("testGroupedNumber", testGroupedNumber),
        ("testGroupMissingCloseParenthesis", testGroupMissingCloseParenthesis),
        ("testGroupMissingOpenParenthesis", testGroupMissingOpenParenthesis),
        ("testIdentifier", testIdentifier),
        ("testNumber", testNumber),
        ("testNumberAndOperator", testNumberAndOperator),
        ("testRedundantGroups", testRedundantGroups),
        ("testUnaryPlus", testUnaryPlus),
        ("testVariable", testVariable),
    ]
}

extension RewriterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RewriterTests = [
        ("testDefaultRules", testDefaultRules),
    ]
}

extension TokenResolverTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TokenResolverTests = [
        ("testArgumentlessFunction", testArgumentlessFunction),
        ("testArgumentlessFunction1", testArgumentlessFunction1),
        ("testArgumentlessFunction2", testArgumentlessFunction2),
        ("testComplexExponent", testComplexExponent),
        ("testCustomOperatorTokens", testCustomOperatorTokens),
        ("testExponent", testExponent),
        ("testHexNumber", testHexNumber),
        ("testIdentifier", testIdentifier),
        ("testImplicitMultiplication", testImplicitMultiplication),
        ("testInjectedAddition", testInjectedAddition),
        ("testLocalizedNumber", testLocalizedNumber),
        ("testLocalizedNumbers", testLocalizedNumbers),
        ("testLocalizedNumbersForEveryLocale", testLocalizedNumbersForEveryLocale),
        ("testLocalizedNumberWithoutLeadingZero", testLocalizedNumberWithoutLeadingZero),
        ("testLowPrecedenceImplicitMultiplication", testLowPrecedenceImplicitMultiplication),
        ("testNegatedExponent", testNegatedExponent),
        ("testNumber", testNumber),
        ("testOctalNumber", testOctalNumber),
        ("testOperatorDisambiguation1", testOperatorDisambiguation1),
        ("testOperatorDisambiguation2", testOperatorDisambiguation2),
        ("testOperatorDisambiguation3", testOperatorDisambiguation3),
        ("testOperatorDisambiguation4", testOperatorDisambiguation4),
        ("testOperatorDisambiguation5", testOperatorDisambiguation5),
        ("testSimpleOperator", testSimpleOperator),
        ("testSpecialNumbers", testSpecialNumbers),
        ("testUnambiguousOperator", testUnambiguousOperator),
        ("testUnaryPlus", testUnaryPlus),
        ("testVariable", testVariable),
    ]
}

extension TokenizerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TokenizerTests = [
        ("testBadHexNumber", testBadHexNumber),
        ("testBadVariable", testBadVariable),
        ("testBasicOperator", testBasicOperator),
        ("testComplexExponent", testComplexExponent),
        ("testConsecutiveOperators", testConsecutiveOperators),
        ("testCustomOperatorTokens", testCustomOperatorTokens),
        ("testDoubleQuotedVariable", testDoubleQuotedVariable),
        ("testEMinusNumber", testEMinusNumber),
        ("testEmpty", testEmpty),
        ("testEmptyQuotedVariable", testEmptyQuotedVariable),
        ("testENumber", testENumber),
        ("testEPlusNumber", testEPlusNumber),
        ("testExponent", testExponent),
        ("testFloatNumber", testFloatNumber),
        ("testGreedyOperator", testGreedyOperator),
        ("testHexNumber", testHexNumber),
        ("testLocalizedNumber", testLocalizedNumber),
        ("testLocalizedNumbers", testLocalizedNumbers),
        ("testLocalizedNumberWithoutLeadingZero", testLocalizedNumberWithoutLeadingZero),
        ("testMissingExponentNumber", testMissingExponentNumber),
        ("testMissingQuoteVariable", testMissingQuoteVariable),
        ("testNumber", testNumber),
        ("testOctalNumber", testOctalNumber),
        ("testQuotedAndEscapedVariable", testQuotedAndEscapedVariable),
        ("testQuotedVariableWithNewline", testQuotedVariableWithNewline),
        ("testQuotedVariableWithReturn", testQuotedVariableWithReturn),
        ("testQuotedVariableWithTab", testQuotedVariableWithTab),
        ("testQuotedZeroLengthVariables", testQuotedZeroLengthVariables),
        ("testSingleQuotedVariable", testSingleQuotedVariable),
        ("testSpecialNumbers", testSpecialNumbers),
        ("testUnaryPlus", testUnaryPlus),
        ("testUnescaptedQuotedVariable", testUnescaptedQuotedVariable),
        ("testVariable", testVariable),
        ("testWhitespace", testWhitespace),
        ("testWhitespaceBetweenTokens", testWhitespaceBetweenTokens),
        ("testZeroLengthVariables", testZeroLengthVariables),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(EvaluatorTests.__allTests__EvaluatorTests),
        testCase(ExpressionTests.__allTests__ExpressionTests),
        testCase(GithubIssues.__allTests__GithubIssues),
        testCase(GroupingTests.__allTests__GroupingTests),
        testCase(RewriterTests.__allTests__RewriterTests),
        testCase(TokenResolverTests.__allTests__TokenResolverTests),
        testCase(TokenizerTests.__allTests__TokenizerTests),
    ]
}
#endif
